---
- :rule: "There should be very few `if` statements; controllers should be as dumb as possible"
  :why: "`if` statements usually imply business logic, which does not belong in controllers.  The logic in the controller should be mainly concerned with send the correct response to the user."
  :example: ""
- :rule: "Avoid excessive filters, or filters that are highly conditional"
  :why: "When the number of filters increases, it becomes harder and harder to know what code is executing and in what order.  Further, when filters set instance variables, it becomes increasingly difficult to understand where those variables are being set, and the filters become very order-specific.  Finally, conditional filters, or filters used on only one controller method increase complexity beyond the point of utility"
- :rule: "`rake routes` should be the truth, the whole truth, and nothing but the truth"
  :why: "By lazily creating all routes for a resource, when you only need a few to be valid, you create misleading output for newcomers, and allow valid named route methods to be created that can only fail at runtime or in production."
  :example: |
    # Wrong; our app only supports create and show
    resources :transactions

    # Right; rake routes reflects the reality of our app now
    resources :transactions, :only => [:create, :show]

- :rule: "Prefer exposing the exact objects views require rather than 'root' objects requiring deep traveral" 
  :why: "When views navigate deep into object hierarchies, it becomes very difficult to understand what data the views really *do* require, and it makes refactoring anything in those object hierarchies incredibly difficult"
  :example: |
    # A view for a person's credit cards requires the person's name, and a list of last-4, type, and expiration date of cards

    # Wrong; the view must navigate through the person to get his credit cards and has
    # access to the entire person objects, which is not needed
    def show
      @person = Person.find(params[:person_id])
    end

    # Wrong; although the view can now access credit cards directly, it's still not clear what data
    # is really needed by the view
    def show
      @person = Person.find(params[:person_id])
      @credit_cards = @person.credit_cards
    end

    # Right; the ivars represent what the view needs AND contain only what the view needs.
    # You may wish to use a more sophisticated "presenter" pattern instead of OpenStruct
    def show
      @person_name = Person.find(params[:person_id]).full_name
      @credit_cards = @person.credit_cards.map { |card|
        OpenStruct.new(:last_four => card.last_four, 
                       :card_type => card.card_type,
                       :expiration_date => [card.expiration_month,card.expiration_year].join('/'))
      }
    end
   
- :rule: "Do not create ivars unless they are to be shared with the views."
  :why: "Using instance variables to avoid passing parameters is lazy and creates complex and hard-to-understand code.  In a controller, instance variables are special: they represent the data passed to the views, and that's all they should be used for."

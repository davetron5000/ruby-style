---
- :rule: "2-space indent"
  :why: "this is standard across almost all Ruby code"
- :rule: "For more than 2 groups of arrowed, equaled, or coloned lines (e.g. a hash or set of local variables), align the operators so that the code forms a 'table'"
  :why: "Although it's extra work to maintain and can break diffs, I feel that the clarity and readability of this structure is worth it - the code is read many more times than changed"
- :rule: "Avoid single-line methods"
  :why: "Single-line methods are harder to change when the method needs an additional line"
- :rule: "Keep line lengths 80 characters or less unless doing so negatively impacts readability (e.g. for large string literals)"
  :why: "Excessively long lines can be very difficult to read and understand; a low line length encourages keeping things simple"
- :rule: "Literal arrays or hashes should have a comma after *every* element, including the last one"
  :why: "This makes it easier to add elements and reorder elements without having to worry about missing commas"
- :rule: "For 'options-hash' calls, align keys across multiple lines, one per line, e.g."
  :why: "This makes it easier to read and modify the options sent to the method"
  :example: |
    some_call(non_option1,non_option2,:foo => "bar",
                                      :blah => "quux",
                                      :bar => 42)
- :rule: "When declaring attributes with `attr_reader` or `attr_accessor`, put one per line"
  :why: "This makes it easier to add new attributres without creating complex diffs.  It also affords documenting what the attributes represent"
  :example: |
    # Wrong; hard to modify
    attr_accessor :first_name, :last_name, :gender

    # Right; we can easily modify and document
    attr_accessor :first_name
    attr_accessor :last_name
    attr_accessor :gender
- :rule: "Literal lists should be on one line or one element per line, depending on length"
  :why: "Two-dimensional data is hard to read and modify."
- :rule: "`protected` and `private` should be aligned with `class`"
  :why: "No reason, just my personal preference"
  :example: |
    class SomeClass

      def public_method
      end

    protected

      def protected_method
      end

    private

      def private_method
      end
    end
- :rule: "`protected` and `private` are surrounded by newlines"
  :why: "Visually sets them off"
- :rule: "A newline after `class` or `module`"
  :why: "Visual clearance"
- :rule: "A newline after `end` unless it's the string of `end`s for the end of the class/module"
  :why: "I don't get much value from visual clearance for the end blocks that 'close' a class or module"
- :rule: "Class methods should be defined via `def self.class_name` and not inside a `class << self`"
  :why: "This reduces errors caused by moving methods around, and also doesn't require you to scroll up in the class to determine what type of method it is; you can see it instantly"
- :rule: "When using the return value of an `if` expression, indent the `else` and `end` with the `if`:"
  :why: "This makes it very clear that you are using `if..else..end` as a complex expression and not as a control structure"
  :example: |
    # Wrong
    result = if something?
      :foo
    else
      :bar
    end

    # Right
    result = if something?
                :foo
             else
                :bar
             end
